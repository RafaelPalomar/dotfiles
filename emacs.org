#+property: header-args :mkdirp yes
#+title: Emacs Configuration

* Introduction

Welcome to my Emacs configuration file! This file is largely based on the configuration of David Wison at [[https://codeberg.org/daviwil/dotfiles]]

* =init.el=

** Base Configuration

#+begin_src emacs-lisp :tangle files/.config/emacs/init.el

  ;; -*- lexical-binding: t; -*-

              ;;; This file is generated from the =emacs.org= file in my dotfiles repository!

              ;;; ----- Basic Configuration -----

  ;; Core settings
  (setq ;; Flash the UI instead of beeping
   visible-bell t

   ;; Yes, this is Emacs
   inhibit-startup-message t

   ;; Instruct auto-save-mode to save to the current file, not a backup file
   auto-save-default nil

   ;; No backup files, please
   make-backup-files nil

   ;; Make it easy to cycle through previous items in the mark ring
   set-mark-command-repeat-pop t

   ;; Don't warn on large files
   large-file-warning-threshold nil

   ;; Follow symlinks to VC-controlled files without warning
   ;; TODO This goes potentially out as I'll be using magit
   ;;vc-follow-symlinks t

   ;; Don't warn on advice
   ad-redefinition-action 'accept

   ;; Revert Dired and other buffers
   global-auto-revert-non-file-buffers t

   ;; Silence compiler warnings as they can be pretty disruptive
   ;; TODO This goes potentially out
   ;; native-comp-async-report-warnings-errors nil
   )

  ;; Core modes
  (repeat-mode 1)                ;; Enable repeating key maps
  (menu-bar-mode 0)              ;; Hide the menu bar
  (tool-bar-mode 0)              ;; Hide the tool bar
  (savehist-mode 1)              ;; Save minibuffer history
  (scroll-bar-mode 0)            ;; Hide the scroll bar
  (xterm-mouse-mode 1)           ;; Enable mouse events in terminal Emacs
  (display-time-mode 1)          ;; Display time in mode line / tab bar
  (fido-vertical-mode 1)         ;; Improved vertical minibuffer completions
  (column-number-mode 1)         ;; Show column number on mode line
  (tab-bar-history-mode 1)       ;; Remember previous tab window configurations
  (auto-save-visited-mode 1)     ;; Auto-save files at an interval
  (global-visual-line-mode 1)    ;; Visually wrap long lines in all buffers
  (global-auto-revert-mode 1)    ;; Refresh buffers with changed local files

  ;; Tabs to spaces
  (setq-default indent-tabs-mode nil
                tab-width 2)

  ;; Display line numbers in programming modes
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)

  ;; Make icomplete slightly more convenient
  ;; TODO this potentiall goes out
  ;; (keymap-set icomplete-fido-mode-map "M-h" 'icomplete-fido-backward-updir)
  ;; (keymap-set icomplete-fido-mode-map "TAB" 'icomplete-force-complete)

  ;; Delete trailing whitespace before saving buffers
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  ;; Move customization settings out of init.el
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file t))

  ;; Match completion substrings that may be out of order
  ;; TODO this poentially goes out
  ;; (defun dw/override-fido-completion-styles ()
  ;;   (setq-local completion-styles '(substring partial-completion emacs22)))

  ;;(add-hook 'icomplete-minibuffer-setup-hook 'dw/override-fido-completion-styles)


  ;; zoom in/out like we do everywhere else.

  (global-set-key (kbd "C-=") 'text-scale-increase)

  (global-set-key (kbd "C--") 'text-scale-decrease)

  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)

  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)

  (global-set-key (kbd "C-r") 'undo-fu-only-redo)


#+end_src

** Evil-mode

This section enables evil mode (vim-type editing experience).

#+begin_src elisp :tangle files/.config/emacs/init.el

  ;;; --------- Enable Evil Mode ---------

  ;; This is required here for evil-collection to work
  (setq evil-want-keybinding nil)

  (require 'evil)
  (evil-mode 1)

  ;; configure undo system
  (setq evil-undo-system 'undo-fu)

  ;;; --------- Evil Snipe ---------

  (require 'evil-snipe)

  (evil-snipe-mode +1)
  (evil-snipe-override-mode +1)

  (setq evil-snipe-scope 'whole-visible)

  ;;; --------- Evil Collection ---------

  (evil-collection-init)

#+end_src

** Appearance

#+begin_src elisp :tangle files/.config/emacs/init.el

  ;;; ----- Appearance -----

  (defun dw/set-terminal-title (title)
    (send-string-to-terminal (format "\e]0;%s\a" title)))

  (defun dw/clear-background-color (&optional frame)
    (interactive)
    (or frame (setq frame (selected-frame)))
    "unsets the background color in terminal mode"
    (unless (display-graphic-p frame)
      ;; Set the terminal to a transparent version of the background color
      (send-string-to-terminal
       (format "\033]11;[90]%s\033\\"
               (face-attribute 'default :background)))
      (set-face-background 'default "unspecified-bg" frame)))

  ;; Clear the background color for transparent terminals
  (unless (display-graphic-p)
    (add-hook 'after-make-frame-functions 'dw/clear-background-color)
    (add-hook 'window-setup-hook 'dw/clear-background-color)
    (add-hook 'ef-themes-post-load-hook 'dw/clear-background-color))

  (when (display-graphic-p)
    (set-face-attribute 'default nil
                        :font "JetBrains Mono"
                        :weight 'normal
                        :height 140)

    ;; Set the fixed pitch face
    (set-face-attribute 'fixed-pitch nil
                        :font "JetBrains Mono"
                        :weight 'normal
                        :height 140)

    ;; Set the variable pitch face
    (set-face-attribute 'variable-pitch nil
                        :font "Iosevka Aile"
                        :height 120
                        :weight 'normal)

    ;; Make frames transparent
    (set-frame-parameter (selected-frame) 'alpha-background 93)
    (add-to-list 'default-frame-alist '(alpha-background . 93))
    (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
    (add-to-list 'default-frame-alist '(fullscreen . maximized)))

  (use-package modus-themes
    :ensure nil
    :demand t
    :custom
    (modus-themes-italic-constructs t)
    (modus-themes-bold-constructs t)
    (modus-themes-common-palette-overrides
     `((bg-main "#292D3E")
       (bg-active bg-main)
       (fg-main "#EEFFFF")
       (fg-active fg-main)
       (fringe unspecified)
       (border-mode-line-active unspecified)
       (border-mode-line-inactive unspecified)
       (fg-mode-line-active "#A6Accd")
       (bg-mode-line-active "#232635")
       (fg-mode-line-inactive "#676E95")
       (bg-mode-line-inactive "#282c3d")
       (bg-tab-bar      "#242837")
       (bg-tab-current  bg-main)
       (bg-tab-other    bg-active)
       (fg-prompt "#c792ea")
       (bg-prompt unspecified)
       (bg-hover-secondary "#676E95")
       (bg-completion "#2f447f")
       (fg-completion white)
       (bg-region "#3C435E")
       (fg-region white)

       (fg-heading-0 "#82aaff")
       (fg-heading-1 "#82aaff")
       (fg-heading-2 "#c792ea")
       (fg-heading-3 "#bb80b3")
       (fg-heading-4 "#a1bfff")

       (fg-prose-verbatim "#c3e88d")
       (bg-prose-block-contents "#232635")
       (fg-prose-block-delimiter "#676E95")
       (bg-prose-block-delimiter bg-prose-block-contents)

       (accent-1 "#79a8ff")

       (keyword "#89DDFF")
       (builtin "#82aaff")
       (comment "#676E95")
       (string "#c3e88d")
       (fnname "#82aaff")
       (type "#c792ea")
       (variable "#ffcb6b")
       (docstring "#8d92af")
       (constant "#f78c6c")))
    :init
    (load-theme 'modus-vivendi-tinted t)
    (add-hook 'modus-themes-after-load-theme-hook #'dw/clear-background-color))

  ;; Make vertical window separators look nicer in terminal Emacs
  (set-display-table-slot standard-display-table 'vertical-border (make-glyph-code ?â”‚))

  ;; Clean up the mode line
  (setq-default mode-line-format
                '("%e" "  "
                  (:propertize
                   ("" mode-line-mule-info mode-line-client mode-line-modified mode-line-remote))
                  mode-line-frame-identification
                  mode-line-buffer-identification
                  "   "
                  mode-line-position
                  mode-line-format-right-align
                  "  "
                  (project-mode-line project-mode-line-format)
                  " "
                  (vc-mode vc-mode)
                  "  "
                  mode-line-modes
                  mode-line-misc-info
                  "  ")
                project-mode-line t
                mode-line-buffer-identification '(" %b")
                mode-line-position-column-line-format '(" %l:%c"))

#+end_src

*** Tab Bar Appearance

Tweak the tab bar to remove some unnecessary elements and shift the =global-mode-string= there.

#+begin_src emacs-lisp :tangle files/.config/emacs/init.el

  ;; Move global mode string to the tab-bar and hide tab close buttons
  (setq tab-bar-close-button-show nil
        tab-bar-separator " "
        tab-bar-format '(tab-bar-format-menu-bar
                         tab-bar-format-tabs-groups
                         tab-bar-separator
                         tab-bar-format-align-right
                         tab-bar-format-global))

  ;; Turn on the tab-bar
  (tab-bar-mode 1)

#+end_src

*** Display Time and World Clock

Time is relative, OK?

#+begin_src emacs-lisp :tangle files/.config/emacs/init.el

  ;; Customize time display
  (setq display-time-load-average nil
        display-time-format "%l:%M %p %b %d W%U"
        display-time-world-time-format "%a, %d %b %I:%M %p %Z"
        display-time-world-list
        '(("Etc/UTC" "UTC")
          ("Europe/Oslo" "Oslo")
          ("America/Los_Angeles" "Seattle")
          ("America/Denver" "Denver")
          ("America/Boston" "Boston")
          ("Pacific/Auckland" "Auckland")
          ("Asia/Shanghai" "Shanghai")
          ("Asia/Kolkata" "Hyderabad")))

#+end_src

** Essential Org Mode Configuration

Here are the most important Org Mode settings that enable me to edit files comfortably, especially my literate configuration files.

#+begin_src emacs-lisp :tangle files/.config/emacs/init.el

  ;;; ----- Essential Org Mode Configuration -----

  (setq org-ellipsis " â–¾"
        org-startup-folded 'content
        org-cycle-separator-lines 2
        org-fontify-quote-and-verse-blocks t)

  ;; Indent org-mode buffers for readability
  (add-hook 'org-mode-hook #'org-indent-mode)

  ;; Set up Org Babel languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)))

  ;; Use org-tempo
  (use-package org-tempo
    :ensure nil
    :demand t
    :config
    (dolist (item '(("sh" . "src sh")
                    ("el" . "src emacs-lisp")
                    ("li" . "src lisp")
                    ("sc" . "src scheme")
                    ("ts" . "src typescript")
                    ("py" . "src python")
                    ("yaml" . "src yaml")
                    ("json" . "src json")
                    ("einit" . "src emacs-lisp :tangle emacs/init.el")
                    ("emodule" . "src emacs-lisp :tangle emacs/modules/dw-MODULE.el")))
      (add-to-list 'org-structure-template-alist item)))

#+end_src

*** Programming languages

**** Guile scheme (and lisp in general)

#+begin_src elisp :tagle files/.config/emacs/init.el

    ;;; ----- Guile Geiser setup -----

  (require 'geiser-guile)

  (with-eval-after-load 'geiser-guile
    (add-to-list 'geiser-guile-load-path "~/src/guix/guix"))

    ;;; ----- Paredit -----

  (require 'paredit)
  (require 'evil-paredit-mode)

  ;; Make evil play nicely with paredit
  (add-hook 'emacs-lisp-mode-hook 'evil-paredit-mode)

#+end_src
